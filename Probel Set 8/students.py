"""
POO: Programa√ß√£o Orientada a Objetos
classes: s√£o modelos para criar dados.
    objetos: s√£o coisas (atributos) dentro das classes.
    m√©todos: s√£o fun√ß√µes dentro das classes.
    __init__(self, ...) : √© o m√©todo construtor. Ele √© chamado quando um objeto √© criado.
    self: √© uma refer√™ncia ao objeto que est√° sendo criado, vai armazenar os atributos do objeto em variaveis 
    __str__(self): √© um m√©todo que retorna uma representa√ß√£o em string do objeto.
    classmethod: √© um m√©todo que √© chamado pela classe e n√£o pelo objeto.
"""
class Student:
    def __init__(self, nome, casa, patrono): #M√©todo construtor
        if not nome:
            raise ValueError('Nome n√£o pode ser vazio.') #Se o nome for vazio, vai dar erro.
        if casa not in ('gryffindor', 'hufflepuff', 'ravenclaw', 'slytherin'):
            raise ValueError('Casa inv√°lida.') #Se a casa n√£o for uma das 4 casas, vai dar erro.
        self.name = nome #Armazena o nome do estudante na vari√°vel name
        self.house = casa #Armazena a casa do estudante na vari√°vel house
        self.patronus = patrono #Armazena o patrono do estudante na vari√°vel patronus
    
    def __str__(self):
        return f'{self.name} da casa {self.house}, com o patrono {self.patronus}' #Retorna o nome e a casa do estudante em formato de string
    
    def charme(self):
        match self.patronus: #Da metch no objeto patronus
            case "cachorro": #Caso for cachorro, retorna um emoji de cachorro
                return "üê∂"
            case "le√£o":
                return "ü¶Å"
            case "gato":
                return "üê±"           
            case "_":
                return "ü§∑‚Äç‚ôÇÔ∏è" #Caso n√£o for nenhum dos anteriores.

def main():
    aluno = get_student()
    print('Expectro patrono')
    print(aluno.charme())

def get_student():
    nome = input('Nome: ')
    casa = input('Casa: ')
    patrono = input('Patrono: ')
    return Student(nome, casa, patrono)

if __name__ == '__main__':
    main()


















































